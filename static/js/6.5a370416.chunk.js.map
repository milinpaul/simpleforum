{"version":3,"sources":["App/Components/AutoCompleteBox/index.js","App/Containers/Posts/PostList/PostsListContainer.js"],"names":["Input","styled","input","props","theme","secondaryTextColor","SuggestionListItem","li","disablePointer","SuggestionList","ul","Index","suggestions","history","useState","showSuggestion","setshowSuggestion","filteredSuggestion","setFilteredSuggestion","onSuggestionClickHandler","user","push","id","placeholder","onChange","e","target","value","newSuggestions","filter","suggestion","name","toLowerCase","includes","length","map","onClick","PostContent","div","PostsListContainer","useRequest","url","getPostsUrl","method","posts","loading","getUsersUrl","users","userLoading","Spinner","AutoCompleteBox","PostGrid","post","find","userId","PostCard","key","title","body","username"],"mappings":"iwBAGA,IAAMA,EAAQC,IAAOC,MAAV,KAOW,SAACC,GAAD,OAAWA,EAAMC,MAAMC,sBAIvCC,EAAqBL,IAAOM,GAAV,KAKZ,SAACJ,GAAD,OAAYA,EAAMK,gBAAkB,aAQ1CC,EAAiBR,IAAOS,GAAV,KACE,SAACP,GAAD,OAAWA,EAAMC,MAAMC,sBAsD9BM,EAnDD,SAAC,GAAmC,IAAD,IAAhCC,mBAAgC,MAAlB,GAAkB,EAAdC,EAAc,EAAdA,QAAc,EACHC,oBAAS,GADN,mBACxCC,EADwC,KACxBC,EADwB,OAEKF,mBAAS,IAFd,mBAExCG,EAFwC,KAEpBC,EAFoB,KAuCzCC,EAA2B,SAACC,GAChCP,EAAQQ,KAAR,gBAAsBD,EAAKE,MAG7B,OACE,oCACE,kBAACtB,EAAD,CAAOuB,YAAY,qBAAqBC,SAlBhB,SAACC,GAC3B,GAAIA,EAAEC,OAAOC,MAAO,CAClB,IAAMC,EAAiBhB,EAAYiB,QAAO,SAACC,GAAD,OACxCA,EAAWC,KAAKC,cAAcC,SAASR,EAAEC,OAAOC,MAAMK,kBAExDd,EAAsBU,GACtBZ,GAAkB,QAElBA,GAAkB,MA9BhBD,EACEE,EAAmBiB,OAEnB,kBAACzB,EAAD,KACGQ,EAAmBkB,KAAI,SAACL,GAAD,OACtB,kBAACxB,EAAD,CAAoB8B,QAAS,kBAAMjB,EAAyBW,KACzDA,EAAWC,UAOlB,kBAACtB,EAAD,KACE,kBAACH,EAAD,CAAoBE,gBAAc,GAAlC,oBAKD,O,4IC7CX,IAAM6B,EAAcpC,IAAOqC,IAAV,KA4CFC,UAtCY,SAAC,GAAiB,IAAf1B,EAAc,EAAdA,QAAc,EACjB2B,YAAW,CAClCC,IAAKC,cACLC,OAAQ,CAAEA,OAAQ,SAHsB,mBACnCC,EADmC,KAC5BC,EAD4B,OAKbL,YAAW,CACtCC,IAAKK,cACLH,OAAQ,CAAEA,OAAQ,SAPsB,mBAKnCI,EALmC,KAK5BC,EAL4B,KAU1C,OAAIH,GAAWG,EACN,kBAACC,EAAA,EAAD,MAIP,kBAACZ,EAAD,KACE,kBAACa,EAAD,CAAiBtC,YAAamC,EAAOlC,QAASA,IAC9C,kBAACsC,EAAA,EAAD,KACGP,GACCA,EAAMT,KAAI,SAACiB,GACT,IAAMhC,EAAO2B,EAAMM,MAAK,SAACjC,GAAD,OAAUA,EAAKE,KAAO8B,EAAKE,UACnD,OACE,kBAACC,EAAA,EAAD,CACE1C,QAASA,EACT2C,IAAKJ,EAAK9B,GACVA,GAAI8B,EAAK9B,GACTmC,MAAOL,EAAKK,MACZC,KAAMN,EAAKM,KACXJ,OAAM,OAAElC,QAAF,IAAEA,OAAF,EAAEA,EAAME,GACdqC,SAAQ,OAAEvC,QAAF,IAAEA,OAAF,EAAEA,EAAMuC","file":"static/js/6.5a370416.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport styled from 'styled-components'\n\nconst Input = styled.input`\n  height: 3.5rem;\n  width: 100rem;\n  border-radius: 5px;\n  font-size: 1.6rem;\n  padding: 2rem;\n  outline: none;\n  border: 1px solid ${(props) => props.theme.secondaryTextColor};\n  margin-bottom: 1rem;\n`\n\nconst SuggestionListItem = styled.li`\n  background: #f3f3f3;\n  width: 100rem;\n  padding: 2rem;\n  font-size: 1.5rem;\n  cursor: ${(props) => !props.disablePointer && 'pointer'};\n  transition: all 0.3s;\n\n  &:hover {\n    background: #ccc;\n  }\n`\n\nconst SuggestionList = styled.ul`\n  border: 1px solid ${(props) => props.theme.secondaryTextColor};\n`\n\nconst Index = ({ suggestions = [], history }) => {\n  const [showSuggestion, setshowSuggestion] = useState(false)\n  const [filteredSuggestion, setFilteredSuggestion] = useState([])\n\n  const renderSuggestionList = () => {\n    if (showSuggestion) {\n      if (filteredSuggestion.length) {\n        return (\n          <SuggestionList>\n            {filteredSuggestion.map((suggestion) => (\n              <SuggestionListItem onClick={() => onSuggestionClickHandler(suggestion)}>\n                {suggestion.name}\n              </SuggestionListItem>\n            ))}\n          </SuggestionList>\n        )\n      } else {\n        return (\n          <SuggestionList>\n            <SuggestionListItem disablePointer>No Users Found!</SuggestionListItem>\n          </SuggestionList>\n        )\n      }\n    }\n    return null\n  }\n\n  const onTextChangeHandler = (e) => {\n    if (e.target.value) {\n      const newSuggestions = suggestions.filter((suggestion) =>\n        suggestion.name.toLowerCase().includes(e.target.value.toLowerCase())\n      )\n      setFilteredSuggestion(newSuggestions)\n      setshowSuggestion(true)\n    } else {\n      setshowSuggestion(false)\n    }\n  }\n\n  const onSuggestionClickHandler = (user) => {\n    history.push(`/user/${user.id}`)\n  }\n\n  return (\n    <>\n      <Input placeholder='Search for authors' onChange={onTextChangeHandler} />\n      {renderSuggestionList()}\n    </>\n  )\n}\n\nexport default Index\n","import React from 'react'\n\nimport { getPostsUrl, getUsersUrl } from '../../../helpers/apiUrl'\nimport useRequest from '../../../Hooks/useRequest'\nimport Spinner from '../../../Components/Spinner'\nimport PostCard from '../../../Components/PostCard'\nimport PostGrid from '../../../Components/PostGrid'\nimport AutoCompleteBox from '../../../Components/AutoCompleteBox'\nimport styled from 'styled-components'\n\nconst PostContent = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`\n\nconst PostsListContainer = ({ history }) => {\n  const [posts, loading] = useRequest({\n    url: getPostsUrl(),\n    method: { method: 'GET' },\n  })\n  const [users, userLoading] = useRequest({\n    url: getUsersUrl(),\n    method: { method: 'GET' },\n  })\n\n  if (loading || userLoading) {\n    return <Spinner />\n  }\n\n  return (\n    <PostContent>\n      <AutoCompleteBox suggestions={users} history={history} />\n      <PostGrid>\n        {posts &&\n          posts.map((post) => {\n            const user = users.find((user) => user.id === post.userId)\n            return (\n              <PostCard\n                history={history}\n                key={post.id}\n                id={post.id}\n                title={post.title}\n                body={post.body}\n                userId={user?.id}\n                username={user?.username}\n              />\n            )\n          })}\n      </PostGrid>\n    </PostContent>\n  )\n}\n\nexport default PostsListContainer\n"],"sourceRoot":""}